https://leetcode.com/problems/unique-paths/

TC: O(mxn)
SC: O(mxn)

class Solution {
public:
    int dp[101][101];
    
    int findNoOfPaths(int i, int j, int m, int n){
        if(i == m-1 && j == n-1){
            return 1;
        }
        if(i >= m || j >= n) return 0;
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        return dp[i][j] = findNoOfPaths(i+1, j, m, n) + findNoOfPaths(i, j+1, m, n);
    }
    
    int uniquePaths(int m, int n) {
        memset(dp,-1, sizeof(dp));
        return findNoOfPaths(0, 0, m, n);
    }
};

===================================================================================================================================

Optimised Approach:

TC: O(m-1) or O(n-1)
SC: O(1)

class Solution {
public:
  
    int uniquePaths(int m, int n) {
        int N = m+n-2;
        int r = m-1;
        double res = 1;
        for(int i = 1; i <= r; i++){
            res = res * (N - r + i) / i;
        }
        return (int)res;
    }
};
