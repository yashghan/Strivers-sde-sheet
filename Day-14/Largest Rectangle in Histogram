https://leetcode.com/problems/largest-rectangle-in-histogram/

Part-1
Two pass solution:
TC: O(4*n)
SC: O(3*n)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int leftSmall[n], rightSmall[n];
        //computing left small
        for(int  i = 0; i <= n-1; i++){
            
            while(!st.empty() && heights[st.top()] >= heights[i]){
                st.pop();
            }
            if(st.empty()) leftSmall[i] = 0;
            else leftSmall[i] = st.top() + 1;
            
            st.push(i);
        }
        //clear the stack to reuse
        while(!st.empty()) st.pop();
        
        //computing right small
        for(int i = n-1; i>= 0; i--){
            while(!st.empty() && heights[st.top()] >= heights[i]){
                st.pop();
            }
            
            if(st.empty()) rightSmall[i] = n-1;
            else rightSmall[i] = st.top() - 1;
            
            st.push(i);
        }
        
        int maxA = 0;
        for(int i = 0; i < n; i++){
            maxA = max(maxA, heights[i] * (rightSmall[i] - leftSmall[i] + 1));
        }
        return maxA;
    }
};

Part2- Optimised Solution -> sINGLE pASS sOLUTION

TC: O(2*n)
SC: O(n)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        int maxA = 0;
        
        for(int i = 0; i <= n; i++){
            while(!st.empty() && (i == n || heights[st.top()] >= heights[i])){
                int height = heights[st.top()];
                st.pop();
                int width;
                if(st.empty()) width = i;
                else width = i - st.top() - 1;
                maxA = max(maxA, height * width);
                
            }
            st.push(i);
        }
        return maxA;
    }
      
};

