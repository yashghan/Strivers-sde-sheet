https://leetcode.com/problems/sliding-window-maximum/

TC: O(n) + O(n) -> O(n)
SC: O(k)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> dq;
        vector<int> ans;
        for(int i = 0; i < n; i++){
            //Condition for out of bounds
            if(!dq.empty() && dq.front() ==  i - k){
                dq.pop_front();
            }
            //Maintaining the decreasing order of deque from front to back
            while(!dq.empty() && nums[dq.back()] <= nums[i]){
                dq.pop_back();
            }
            
            dq.push_back(i);
            //Updating max for subarray of size k
            if(i >= k-1) ans.push_back(nums[dq.front()]); 
        }
        return ans;
    }
};
