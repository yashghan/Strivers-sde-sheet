/*
Total = 10 elements
For median there will be 5 elements of both arr1 and arr2 to the left and five to 
the right

For only even

cuts = 0   1    2    3    4
arr1 = | 7 | 12 | 14 | 15 |

       0   1   2   3   4   5    6
arr2 = | 1 | 2 | 3 | 4 | 9 | 11 |

==============================================================================

low = 0  hi = 4 ,  cut1 = 0 + 4 / 2 = 2 , cut 2 = 5 - 2 = 3
     
     l1       r1
  7  12       14  15
  
        l2    r2
  1  2  3     4   9  11
  
 obviously  l1 <= r1 and l2 <= r2 because arr1 is sorted and arr2 is sorted
 Right condition: l1 <= r2 and l2 <= r1
 In the above case Right condition is not followed
 in the above case: we need to reduce l1
 Hence: hi = mid - 1
 
==================================================================================

 low = 0     hi = 1 ,  cut = 0+1 / 2 = 0, cut2 = 5-0 = 5
 
 x                  7  12 14 15
 1 2 3 4 9          11

l1 = INT_MIN        r1 = 7
l2 = 9              r2 = 11

l2 !<= r1, Hence we need to reduce l2
low = mid + 1 

==================================================================================
low = 1    hi = 1  cut1 = 1 , cut2 = 5-1 = 4

7            12 14 15
1 2 3 4      9  11

l1 = 7       r1`= 12
l2 = 4       r2 = 9

Both the conditions are satisfied

max(l1, l2) + min(r1,r2) / 2 = 7 + 9/ 2 = 8 => median

============================================================================
Note:  l1 = arr1[cut1 - 1]   , if l1 is not present take l1 = INT_MIN
       l2 = arr2[cut2 - 1]   , if l2 is not present take l2 = INT_MIN
       r1 = arr1[cut1] , if r1 is not present take r1 = INT_MAX
       r2 = arr2[cut2] , if r2 is not present take r2 = INT_MAX

==============================================================================
For odd + even
cut1 = (low + hi) / 2
cut2 = (n1 + n2 + 1) / 2  -  cut1
median = max(l1, l2);

*/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums2.size() < nums1.size()) return findMedianSortedArrays(nums2, nums1);
        
        int n1 = nums1.size();
        int n2 = nums2.size();
        
        int low = 0, high = n1;
        
        while(low <= high){
            int cut1 = (low + high) >> 1;
            int cut2 = (n1 + n2 + 1) / 2 - cut1;
            
            int left1 = cut1 == 0 ? INT_MIN : nums1[cut1-1]; 
            int left2 = cut2 == 0 ? INT_MIN : nums2[cut2-1]; 
            
            int right1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int right2 = cut2 == n2 ? INT_MAX : nums2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                if((n1 + n2) % 2 == 0){
                    return (max(left1,left2) + min(right1,right2)) / 2.0;
                }
                else{
                    return max(left1, left2);
                }
            }
            else if(left1 > right2){
                high = cut1 - 1;
            }
            else{
                low = cut1 + 1;
            }
        }
        return 0.0;
    }
};


