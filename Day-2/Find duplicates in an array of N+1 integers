
https://leetcode.com/problems/find-the-duplicate-number/

TC: O(n+n) - > O(n)
SC: O(n)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int> freq(n, 0);
        for(int i = 0; i < n; i++){
            freq[nums[i]]++;
        }
        for(int i = 0; i < n; i++){
            if(freq[i] > 1){
                return i;
            }
        }
        return 0;
    }
};

//=========================================================================

// Slow and Fast Pointer method
/*
    tc  : O(N)
    sc:  O(1)
*/

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);
        
        fast = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;   
    }
};
