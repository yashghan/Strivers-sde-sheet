Time complexity: O(logn)

Space Complexity: O(1)

// Gap Method

class Solution {
public:
   
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {

        if(n > m){
            merge(nums2, n, nums1, m);
        }
        // nums1.erase(remove(nums1.begin(), nums1.end(), 0), nums1.end());
        
        int gap = ceil((float)(m+n)/2);
        // cout << gap << endl;
        while(gap > 0){
            int i = 0;
            int j = gap;
            while(j < (m+n)){
                if(j < n && nums1[i] > nums1[j]){
                    swap(nums1[i], nums1[j]);
                }
                else if(j >= n && i < n && nums1[i] > nums2[j-n]){
                    swap(nums1[i], nums2[j-n]);
                }
                else if(j >= n && i >= n && nums2[i-n] > nums2[j-n]){
                    swap(nums2[i-n], nums2[j-n]);
                }
                i++;
                j++;
            }
            if(gap == 1){
                gap = 0;
            }
            else{
                gap = ceil((float) gap / 2);
            }
        }
    }
};
