  https://www.codingninjas.com/codestudio/problems/799354?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website
  
  TC: O(2n + 2n) = O(n)
  SC: O(n)

Below Solution is for circular array:- 

        vector<int> nextGreaterElements(vector<int> &arr, int n) {
            stack<int> st;
            vector<int> nge(n, -1);
            for(int i = 2 * n - 1; i >= 0; i--){
                while(!st.empty() && st.top() <= arr[i % n]){
                    st.pop();
                }
        
                if(i < n){
                    if(!st.empty()){
                        nge[i] = st.top();
                    }
                }
                st.push(arr[i % n]);
            }
            return nge;
        }
        
        
https://leetcode.com/problems/next-greater-element-i/
Solution for non circular array:-

 TC: O(n + n + n) = O(n)
 SC: O(n)

class Solution {
public:
     //nums1 is a subset of nums2.
    
    unordered_map<int, int> nextGreaterElements(vector<int>& nums2 ,int n, unordered_map<int,int> &m
) {
        stack<int> st;
        // vector<int> nge(n, -1);
        for(int i = n - 1; i >= 0; i--){
            while(!st.empty() && st.top() <= nums2[i]){
                st.pop();
            }
        
            if(i < n){
                if(!st.empty()){
                    m[nums2[i]] = st.top();
                }
                else{
                    m[nums2[i]] = -1;
                }
            }
            st.push(nums2[i]);
        }
        return m;
    }
    
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        int n = nums2.size();
        unordered_map<int,int> m;

        nextGreaterElements(nums2, n, m);
        vector<int> ans(nums1.size(), -1);
        for(int i = 0; i < nums1.size(); i++){
            ans[i] = m[nums1[i]];
        }
        return ans;
    }
};
