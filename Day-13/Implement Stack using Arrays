
#include <bits/stdc++.h>
#include <chrono>
using namespace std;


#define MAX 1000


class Stack{
    int top;

    public:
        int a[MAX]; // maximum size of stack

        Stack() { top = -1; }
        bool push(int x);
        int pop();
        int peek();
        bool isEmpty();
};

bool Stack:: push(int x){

    if(top >= MAX-1){
        cout << "Stack Overflow";
        return false;
    }
    else{
        a[++top] = x;
        cout << x << " pushed into stack " << "\n";
        return true;
    }
}

int Stack::pop(){
    if(top < 0){
        cout << "Stack Underflow";
        return 0;
    }
    else{
        int x = a[top--];
        return x;

    }
}

int Stack::peek(){
    if(top < 0){
        cout << "Stack is empty " << "\n";
        return 0;
    }
    else{
        int x = a[top];
        return x;
    }
}

bool Stack::isEmpty(){
    return (top < 0);
}

int main()
{

  #ifndef ONLINE_JUDGE
  freopen("Error.txt", "w", stderr);
  #endif

  #ifndef ONLINE_JUDGE
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
  #endif


    class Stack s;
    s.push(20);
    s.push(10);
    s.push(40);
    s.push(50);
    cout << s.pop() << " Popped from stack" << "\n";

    //print top element of stack after poping
    cout << "Top element is: " << s.peek() << "\n";

    //print all elements in stack :
    cout<<"Elements present in stack : ";

    while(!s.isEmpty()){
        // print top element in stack
        cout << s.peek() << " ";
        // remove top element in stack
        s.pop();
    }
  

    return 0;

}


Time Complexities of operations on the stack:

push(), pop(), isEmpty() and peek() all take O(1) time. We do not run any loop in any of these operations.

Implementing Stack using Arrays:
Pros: Easy to implement. Memory is saved as pointers are not involved. 
Cons: It is not dynamic. It doesnâ€™t grow and shrink depending on needs at runtime.


Implementing Stack using Linked Lists:

Advantages of Stack:
The linked list implementation of a stack can grow and shrink according to the needs at runtime.
It is used in many virtual machines like JVM.
Stacks are more secure and reliable as they do not get corrupted easily.
Stack cleans up the objects automatically.


Disadvantages of Stack:                                                                                                              
Requires extra memory due to involvement of pointers.
Random accessing is not possible in stack.
The total of size of the stack must be defined before.
If the stack falls outside the memory it can lead to abnormal termination.

